package simulationControl;

import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JPanel;

import display.BallDisplay;
import display.ButtonDisplay;
import display.Image;
import display.SetupPanel;
import display.StatisticsDisplay;
import simulationLogic.Ball;
import simulationLogic.BallSimulation;

//TODO: Add ability to put in seeds
//buttons: restart, random (with same stats), create

/**
 * A simulation that runs and displays. All simulations have constant parameters.
 * In the simulation display, one can reset to restart the simulation or open up the simulation creation menu.
 * @author Joshua Engels
 * 
 */
public class Simulation{

	public Constants constants;
	public Simulation(Constants c){
		constants = c;
	}

	private static ArrayList<Ball> createRandomBalls(int numBalls, double minRadius, double maxRadius, int xMax, int yMax, double maxVel){
		long generatorStartTime = System.currentTimeMillis();
		ArrayList<Ball> balls = new ArrayList<Ball>();			
		outer:
			while(balls.size() < numBalls){

				if(System.currentTimeMillis() - generatorStartTime > 1000) {
					System.out.println("Only could produce " + balls.size() + " balls" );
					System.out.println(balls.size());
					break;
				}

				Ball b = new Ball(Math.random() * xMax, 
						Math.random() * yMax,
						maxVel * (Math.random() - 0.5),
						maxVel * (Math.random() - 0.5), 
						minRadius + (int)((maxRadius - minRadius) * Math.random()));

				//replace with method in simulation
				if(b.getRadius() > b.getPos().x || b.getRadius() + b.getPos().x > xMax) {
					continue;
				}
				if(b.getRadius() > b.getPos().y || b.getRadius() + b.getPos().y > yMax) {
					continue;
				}

				for(Ball c : balls) {
					if(c.intersects(b)) {
						continue outer;
					}
				}
				balls.add(b);
			}

		return balls;
	}
	
	private static ArrayList<Ball> thisShouldBeRad() {
//		String toParse = "5,81,17,4,74,27,4,78,38,7,70,45,5,68,60,7,66,77,4,61,90,6,53,107,3,42,123,6,78,75,5,88,76,4,100,80,7,105,93,7,102,105,7,90,120,6,99,136,6,84,143,3,170,117,7,156,127,7,147,137,4,150,155,6,159,175,3,178,179,7,195,172,5,208,159,6,208,146,7,208,129,7,196,114,6,257,159,4,253,173,4,251,189,3,253,200,7,259,207,5,270,207,3,286,201,4,296,193,3,299,183,3,304,173,4,310,182,3,310,193,7,308,207,7,302,216,7,304,231,6,319,231,4,330,222,3,340,216,4,343,208,3,346,201,3,351,195,5,108,85,7,61,70,3,55,119,4,57,100,7,75,52,3,400,219,3,391,226,4,384,232,7,378,239,4,383,251,7,398,259,4,411,256,6,420,247,3,422,237,5,419,227,7,414,219,6,424,263,3,428,275,4,427,253,7,430,244,6,439,235,7,448,219,6,456,206,7,462,191,7,466,177,5,486,249,7,481,259,6,476,270,4,478,281,6,486,287,3,496,284,7,505,280,7,511,271,4,520,260,6,495,293,5,492,300,4,486,305,4,480,310,3,475,316,7,468,319,6,457,322,3,443,323,7,604,206,4,600,217,4,596,229,3,590,237,7,586,244,3,584,255,4,592,245,5,600,240,6,604,231,7,581,268,4,572,279,4,580,285,3,574,293,5,569,291,5,566,301,6,558,312,6,572,315,6,577,304,6,558,324,6,545,325,4,569,333,4,586,278,4,593,271,4,596,262,4,599,251,5,520,354,5,530,356,7,538,362,7,544,372,3,533,381,3,522,381,7,514,379,3,506,371,7,507,358,7,517,363,3,528,370,6,518,373,6,192,183,7,207,173,7,184,124,5,182,109,4,167,129,5,143,146,7,148,167,6,162,166,3,167,183,4,212,139,6,208,119,7,77,68,3,62,35,7,84,27,3,62,15,4,51,130,5,312,169";
		// String toParse = "4,75,72,4,73,83,3,79,89,3,68,97,5,79,105,5,66,107,5,75,115,4,62,128,3,71,127,4,65,119,3,70,138,5,58,141,5,66,148,6,56,154,4,65,161,4,51,168,6,60,173,3,60,186,6,49,179,5,46,191,6,58,200,4,82,147,4,94,150,4,85,158,3,96,159,6,100,165,5,101,175,5,101,187,7,99,200,6,98,213,6,110,206,7,111,193,5,116,179,4,110,164,5,104,155,5,86,80,5,64,66,3,66,79,4,56,61,4,107,219,5,181,181,3,174,187,3,166,194,3,162,201,5,162,210,7,162,221,7,171,231,7,186,237,6,203,234,4,212,224,5,212,213,6,212,203,7,210,191,4,200,183,6,190,178,4,88,97,3,78,97,3,71,91,6,258,187,4,258,197,6,260,210,5,263,222,5,267,235,4,276,245,5,286,238,5,289,228,7,292,220,5,296,208,7,302,194,7,310,207,5,312,222,4,315,235,4,322,245,5,331,247,4,338,240,6,338,231,7,342,221,4,340,207,3,348,198,3,411,206,3,404,209,7,403,217,4,403,228,5,404,240,5,405,251,3,416,253,4,425,253,6,435,251,7,438,241,4,437,229,6,435,218,3,434,205,6,404,202,5,422,200,5,433,193,6,434,183,6,434,171,4,434,159,3,433,147,7,446,233,4,454,239,3,445,246,7,461,247,5,470,253,4,518,199,5,520,207,3,523,217,7,527,224,5,552,202,3,550,215,6,542,223,5,536,232,6,529,245,5,520,257,6,514,266,3,506,277,7,494,281,7,604,111,7,604,125,4,604,138,3,610,146,6,599,148,4,606,155,3,604,165,7,606,172,3,612,181,4,612,165,6,606,189,3,617,195,7,605,195,5,609,207,3,618,213,5,606,216,3,615,221,7,604,223,3,610,232,3,602,240,6,614,241,7,607,269,6,620,268,7,614,279,5,501,290,6,410,197,3,56,113,5,95,194,7,190,188,3,600,281,6,625,278,7,524,235,6,615,291,4,604,293,6,624,286,7,444,212,4,172,205,5,170,215,6,178,195,6,622,171,3,618,158,6,620,149,5,617,136,5,615,127,3,615,118";
		//String toParse = "7,44,111,7,50,115,4,60,115,3,66,113,3,45,117,5,44,115,4,46,121,6,53,121,4,58,125,5,66,119,4,64,125,3,63,132,4,66,130,7,57,151,7,56,178,5,100,150,5,109,175,6,110,201,7,110,186,4,110,195,3,114,183,6,120,183,6,120,187,7,118,197,3,120,193,5,118,204,4,121,202,4,118,210,4,121,209,7,118,217,5,120,213,3,118,204,6,120,207,4,108,210,3,103,221,3,112,221,7,120,221,6,106,221,3,114,211,5,114,218,7,121,223,5,112,223,4,122,222,4,96,221,4,99,214,7,99,207,5,100,199,6,104,191,7,104,173,3,102,192,7,102,205,7,122,178,7,122,168,3,115,156,4,111,171,6,114,160,3,118,166,5,114,173,4,113,175,4,102,181,7,104,162,4,94,156,3,109,166,4,99,159,5,105,155,5,110,147,7,96,142,4,84,145,5,84,155,6,100,167,6,80,157,3,80,147,7,76,150,3,72,155,4,68,162,7,61,150,6,62,139,5,56,130,5,48,128,5,48,135,7,57,148,3,63,143,7,64,156,3,56,175,5,64,196,3,64,213,3,59,217,4,63,219,3,63,226,4,58,223,3,67,217,7,52,218,3,49,213,6,51,190,4,55,205,7,61,203,3,61,190,3,50,197,5,50,187,3,50,165,4,50,147,6,56,159,5,62,163,4,62,171,3,50,166,6,47,157,4,46,144,5,52,137,5,48,153,3,42,166,3,42,175,7,44,184,3,46,194,7,46,207,5,45,215,6,68,205,6,54,201,7,54,185,3,65,181,6,46,174,4,44,179";
		// String toParse = "3,44,101,6,50,101,6,59,103,3,50,108,4,59,111,7,54,115,7,49,125,3,61,125,6,60,131,5,50,135,4,58,140,7,46,143,7,52,149,6,48,161,4,57,165,3,46,173,7,52,172,6,56,179,5,48,185,3,61,191,4,48,193,7,54,199,4,49,208,3,62,208,5,54,213,7,59,219,4,68,154,6,79,146,4,87,140,5,94,147,6,97,136,7,106,139,6,104,151,4,116,152,3,108,165,3,114,160,5,119,167,5,119,167,3,110,169,7,116,175,3,106,183,6,118,184,6,116,191,5,108,194,6,118,204,4,110,209,6,108,203,6,118,216,6,174,143,7,176,153,5,163,147,7,156,156,4,164,159,6,153,165,7,161,171,6,152,177,5,163,187,4,154,194,3,162,196,6,156,199,4,171,201,3,164,205,3,170,217,7,170,207,5,175,211,7,182,221,7,186,212,7,200,220,4,202,210,5,218,213,6,216,204,3,228,205,4,217,193,5,232,194,3,220,193,3,226,193,4,217,180,7,228,184,6,228,184,6,236,171,4,223,171,4,216,158,7,230,163,4,224,155,5,217,145,3,214,153,5,211,137,6,208,145,3,200,147,4,184,147,6,185,137,3,199,139,5,188,143,7,249,135,3,258,135,7,252,145,7,262,145,3,256,157,4,268,156,4,272,164,6,263,165,3,263,175,4,276,175,5,276,181,3,268,184,6,278,188,7,269,193,6,278,196,5,278,206,5,278,221,3,278,215,6,290,221,3,287,213,7,287,203,7,294,203,3,294,194,4,306,185,5,296,185,4,296,172,7,304,172,5,300,163,7,306,155,4,304,140,4,317,138,3,324,147,6,318,147,7,314,154,4,323,153,4,323,165,7,320,171,3,327,175,7,320,183,4,330,189,4,330,199,5,338,197,4,335,208,4,343,204,4,331,215,3,327,205,4,334,222,3,345,222,5,339,214,5,348,215,3,347,211,7,351,200,7,347,188,4,356,188,5,361,174,5,349,176,4,356,176,6,351,170,5,362,167,4,356,157,6,367,154,3,373,145,7,373,137,6,362,137,5,362,145,7,474,102,7,461,102,7,470,111,5,462,120,6,472,125,4,457,131,4,468,134,4,475,140,7,474,129,4,466,140,4,457,149,4,449,149,3,447,141,5,442,151,4,435,136,3,429,143,6,438,144,5,424,145,6,423,133,5,415,136,6,414,151,5,407,141,3,400,149,7,408,157,3,401,164,4,409,169,3,394,177,3,406,177,5,414,185,7,407,187,3,394,191,4,402,201,6,410,194,7,416,204,5,404,208,6,421,223,4,423,209,6,434,215,5,449,209,7,456,201,5,440,220,6,416,217,4,460,192,5,460,184,7,460,171,3,460,161,6,470,152,6,476,161,6,468,169,4,474,178,7,470,187,3,473,191,6,473,201,3,466,205,5,456,219,3,464,213,4,466,222,7,476,221,4,474,211,7,515,141,4,505,141,5,503,149,5,513,149,5,519,159,5,510,159,4,515,166,6,518,177,4,521,169,7,525,179,3,522,191,7,519,185,5,530,192,7,530,206,4,523,200,5,544,203,7,549,192,5,554,200,6,557,188,4,547,183,5,549,175,5,560,177,4,570,162,4,568,169,6,556,169,5,556,156,5,570,149,4,578,141,3,563,138,5,560,144,4,530,215,6,542,213,5,548,214,6,535,227,6,526,237,6,535,237,4,529,256,7,518,245,6,527,245,5,516,253,4,501,253,7,608,204,4,620,204,3,620,215,6,609,213,4,608,217,5,620,220,3,620,191,5,612,189,7,612,176,4,620,179,7,620,165,4,612,165,6,608,152,3,618,153,4,622,141,6,609,141,5,616,140,6,624,133,7,612,133,5,609,121,7,622,121,3,620,109,7,611,101,3,611,109";
		String toParse = "5,46,105,9,54,103,8,58,115,7,50,129,8,59,139,9,50,149,9,52,165,6,50,185,7,49,203,8,66,154,5,59,199,9,63,211,8,52,216,6,63,176,6,76,149,8,82,139,5,92,147,7,102,135,9,108,145,5,108,157,6,121,162,7,107,171,9,118,175,6,109,187,6,118,192,7,106,201,7,117,205,5,107,219,7,118,219,8,164,176,8,152,167,6,168,162,7,161,150,7,178,151,7,172,141,8,189,141,7,206,147,9,202,137,6,219,152,6,215,164,8,228,165,9,230,179,9,220,191,9,214,208,9,199,216,8,178,217,6,170,203,9,164,213,5,155,194,5,152,183,9,263,139,7,259,151,8,270,163,6,266,178,6,277,184,8,272,195,6,284,203,5,276,215,6,288,217,7,298,207,6,298,194,6,294,181,8,304,181,8,300,166,7,313,157,6,306,145,6,319,139,9,324,149,5,324,171,6,333,184,9,326,193,8,338,203,6,334,217,8,350,217,7,356,193,5,351,177,8,363,173,6,355,161,7,369,155,6,360,141,5,372,140,6,452,149,6,442,143,5,432,147,5,426,138,5,412,141,9,414,151,8,402,157,9,406,176,8,400,192,7,414,202,9,418,215,7,440,215,5,454,205,6,462,216,6,473,216,6,470,204,6,460,191,9,470,191,8,470,175,8,460,164,7,472,151,9,463,137,7,472,123,7,461,103,5,457,117,6,476,103,5,497,140,8,510,141,7,518,155,6,511,169,8,504,155,9,523,177,9,523,196,9,539,208,7,507,251,9,522,251,5,530,235,9,532,219,5,553,191,8,554,175,5,563,167,9,560,149,6,574,140,5,569,155,6,610,206,7,623,207,9,621,219,8,618,183,7,610,218,7,622,169,8,610,153,6,624,144,6,624,156,9,611,137,9,608,122,8,610,107,9,626,108,8,622,125";
		String[] split = toParse.split(",");
		List<Integer> parsed = Arrays.asList(split).stream().map(s -> Integer.parseInt(s)).collect(Collectors.toList());

		String toParse2 = "3,44,101,6,50,101,6,59,103,3,50,108,4,59,111,7,54,115,7,49,125,3,61,125,6,60,131,5,50,135,4,58,140,7,46,143,7,52,149,6,48,161,4,57,165,3,46,173,7,52,172,6,56,179,5,48,185,3,61,191,4,48,193,7,54,199,4,49,208,3,62,208,5,54,213,7,59,219,4,68,154,6,79,146,4,87,140,5,94,147,6,97,136,7,106,139,6,104,151,4,116,152,3,108,165,3,114,160,5,119,167,5,119,167,3,110,169,7,116,175,3,106,183,6,118,184,6,116,191,5,108,194,6,118,204,4,110,209,6,108,203,6,118,216,6,174,143,7,176,153,5,163,147,7,156,156,4,164,159,6,153,165,7,161,171,6,152,177,5,163,187,4,154,194,3,162,196,6,156,199,4,171,201,3,164,205,3,170,217,7,170,207,5,175,211,7,182,221,7,186,212,7,200,220,4,202,210,5,218,213,6,216,204,3,228,205,4,217,193,5,232,194,3,220,193,3,226,193,4,217,180,7,228,184,6,228,184,6,236,171,4,223,171,4,216,158,7,230,163,4,224,155,5,217,145,3,214,153,5,211,137,6,208,145,3,200,147,4,184,147,6,185,137,3,199,139,5,188,143,7,249,135,3,258,135,7,252,145,7,262,145,3,256,157,4,268,156,4,272,164,6,263,165,3,263,175,4,276,175,5,276,181,3,268,184,6,278,188,7,269,193,6,278,196,5,278,206,5,278,221,3,278,215,6,290,221,3,287,213,7,287,203,7,294,203,3,294,194,4,306,185,5,296,185,4,296,172,7,304,172,5,300,163,7,306,155,4,304,140,4,317,138,3,324,147,6,318,147,7,314,154,4,323,153,4,323,165,7,320,171,3,327,175,7,320,183,4,330,189,4,330,199,5,338,197,4,335,208,4,343,204,4,331,215,3,327,205,4,334,222,3,345,222,5,339,214,5,348,215,3,347,211,7,351,200,7,347,188,4,356,188,5,361,174,5,349,176,4,356,176,6,351,170,5,362,167,4,356,157,6,367,154,3,373,145,7,373,137,6,362,137,5,362,145,7,474,102,7,461,102,7,470,111,5,462,120,6,472,125,4,457,131,4,468,134,4,475,140,7,474,129,4,466,140,4,457,149,4,449,149,3,447,141,5,442,151,4,435,136,3,429,143,6,438,144,5,424,145,6,423,133,5,415,136,6,414,151,5,407,141,3,400,149,7,408,157,3,401,164,4,409,169,3,394,177,3,406,177,5,414,185,7,407,187,3,394,191,4,402,201,6,410,194,7,416,204,5,404,208,6,421,223,4,423,209,6,434,215,5,449,209,7,456,201,5,440,220,6,416,217,4,460,192,5,460,184,7,460,171,3,460,161,6,470,152,6,476,161,6,468,169,4,474,178,7,470,187,3,473,191,6,473,201,3,466,205,5,456,219,3,464,213,4,466,222,7,476,221,4,474,211,7,515,141,4,505,141,5,503,149,5,513,149,5,519,159,5,510,159,4,515,166,6,518,177,4,521,169,7,525,179,3,522,191,7,519,185,5,530,192,7,530,206,4,523,200,5,544,203,7,549,192,5,554,200,6,557,188,4,547,183,5,549,175,5,560,177,4,570,162,4,568,169,6,556,169,5,556,156,5,570,149,4,578,141,3,563,138,5,560,144,4,530,215,6,542,213,5,548,214,6,535,227,6,526,237,6,535,237,4,529,256,7,518,245,6,527,245,5,516,253,4,501,253,7,608,204,4,620,204,3,620,215,6,609,213,4,608,217,5,620,220,3,620,191,5,612,189,7,612,176,4,620,179,7,620,165,4,612,165,6,608,152,3,618,153,4,622,141,6,609,141,5,616,140,6,624,133,7,612,133,5,609,121,7,622,121,3,620,109,7,611,101,3,611,109";
		String[] split2 = toParse2.split(",");
		List<Integer> parsed2 = Arrays.asList(split2).stream().map(s -> Integer.parseInt(s)).collect(Collectors.toList());

		//		int sumX = 0;
//		int sumY = 0;
//		for (int i = 0; i < parsed.size(); i+=3) {
//			sumX += parsed.get(i + 1);
//			sumY += parsed.get(i + 2);
//		}
//		double aveX = sumX / parsed.size() * 3;
//		double aveY = sumY / parsed.size() * 3;
		ArrayList<Ball> result = new ArrayList<Ball>();
		for (int i = 0; i < parsed.size(); i+=3) {
			result.add(new Ball(parsed.get(i + 1), parsed.get(i + 2) - 50, 500 * (Math.random() - 0.5), 500 * (Math.random() - 0.5), parsed.get(i)));
		}
		for (int i = 0; i < parsed2.size(); i+=3) {
			if (Math.random() < 0.08)
				result.add(new Ball(parsed2.get(i + 1), parsed2.get(i + 2) - 50, 500 * (Math.random() - 0.5), 500 * (Math.random() - 0.5), parsed2.get(i)));
		}
		return result;
	}
	


	public void run() throws InterruptedException{
//		ArrayList<Ball> balls = createRandomBalls(constants.NUM_BALLS, constants.MIN_RADIUS, constants.MAX_RADIUS,
//				constants.X_MAX, constants.Y_MAX_SIM, constants.MAX_VELOCITY);
		ArrayList<Ball> balls = thisShouldBeRad();
		BallSimulation simulator = new BallSimulation(balls, constants.X_MAX, constants.Y_MAX_SIM, constants.AREA_MASS_DEPENDENCE);

		Image firstImage = simulator.getNextImage(0);


		//All the frame stuff should be in the display package
		BallDisplay display = new BallDisplay();
		display.setImage(firstImage);
		display.setPreferredSize(new Dimension(constants.X_MAX, constants.Y_MAX_SIM));
		display.setBackground(Color.white);
		
		StatisticsDisplay display2 = new StatisticsDisplay(constants.X_MAX, constants.Y_MAX_GRAPH);
		display2.setImage(firstImage);
		display2.setPreferredSize(new Dimension(constants.X_MAX, constants.Y_MAX_GRAPH));

		ButtonDisplay display3 = new ButtonDisplay();
		display3.setPreferredSize(new Dimension(constants.X_MAX, constants.Y_MAX_GRAPH / 8));

		JPanel mainPanel = new JPanel();
		mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
		mainPanel.add(display);
		mainPanel.add(display2);
		mainPanel.add(display3);
		mainPanel.setVisible(true);
		mainPanel.setBackground(Color.white);

		JFrame ballFrame = new JFrame();
		ballFrame.add(mainPanel);
		ballFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		ballFrame.setVisible(true);
		ballFrame.pack();
		ballFrame.setResizable(false);
		ballFrame.setBackground(Color.white);
		Thread.sleep(10000); // Pause for recording

		long startTime = System.currentTimeMillis();
		display2.setStartTime(startTime);
		long simulationTime = startTime;
		while(true) {

			//Make collision number part of the image
			Image next = simulator.getNextImage(constants.MILLASECONDS_PER_FRAME / 1000.0);

			display.setImage(next);
			display2.setImage(next);
			display2.setNumCollisions(simulator.getNumCollisions());
			ballFrame.repaint();


			simulationTime += constants.MILLASECONDS_PER_FRAME;
			long elapsedRealTime = System.currentTimeMillis() - startTime;

			if((simulationTime - startTime) > elapsedRealTime) {
				Thread.sleep((simulationTime - startTime) - elapsedRealTime);
			}

			if(display3.reset() || display3.changeStats()) {
				break;
			}

		}

		ballFrame.dispose();

		System.out.println("here");
		if(display3.changeStats()) {
			JFrame setupFrame = new JFrame("Stat Change");
			setupFrame.add(new SetupPanel(this));
			//setupFrame.add(mainPanel);
			setupFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			setupFrame.setVisible(true);
			setupFrame.pack();
			setupFrame.setResizable(false);

			constantsSet = false;
			synchronized(this) {
				while(!constantsSet) {
					wait();
				}
			}

			setupFrame.dispose();

		}
	}

	private boolean constantsSet = false;
	public void setCostants(Constants c) {
		synchronized(this) {
			Run.setNextConstants(c);
			constantsSet = true;
			notifyAll();
		}
	}


}
